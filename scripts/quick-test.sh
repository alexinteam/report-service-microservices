#!/bin/bash

# üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–∏—Å—Ç–µ–º—ã Report Microservices
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 19 –æ–∫—Ç—è–±—Ä—è 2025

set -e

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BASE_URL="http://arch.homework"
API_BASE="$BASE_URL/api/v1"
TOKEN=""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
get_token() {
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞..."
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print_info "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    local register_response
    register_response=$(curl -s -X POST -H "Content-Type: application/json" \
        -d '{"name":"Test User","email":"test@example.com","password":"password123"}' \
        "$API_BASE/users/register")
    
    if echo "$register_response" | grep -q "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; then
        print_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–≥–∏–Ω–æ–º"
    elif echo "$register_response" | jq -e '.user' > /dev/null 2>&1; then
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    else
        print_info "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–≥–∏–Ω–æ–º"
    fi
    
    # –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–Ω–∏–º—Å—è
    local response
    response=$(curl -s -X POST -H "Content-Type: application/json" \
        -d '{"email":"test@example.com","password":"password123"}' \
        "$API_BASE/users/login")
    
    if echo "$response" | jq -e '.token' > /dev/null 2>&1; then
        TOKEN=$(echo "$response" | jq -r '.token')
        print_success "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
        return 0
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"
        echo "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Gateway
test_api_gateway() {
    print_header "API GATEWAY"
    
    # Health check
    if curl -s "$BASE_URL/health" | grep -q "healthy"; then
        print_success "API Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è User Service
test_user_service() {
    print_header "USER SERVICE"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if get_token; then
        print_success "User Service —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "User Service –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Template Service
test_template_service() {
    print_header "TEMPLATE SERVICE"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ API Gateway
    if curl -s -H "Authorization: Bearer $TOKEN" http://arch.homework/api/v1/templates | jq -e '.templates' > /dev/null 2>&1; then
        print_success "Template Service —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "Template Service –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Data Service
test_data_service() {
    print_header "DATA SERVICE"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API Gateway
    if curl -s -H "Authorization: Bearer $TOKEN" http://arch.homework/api/v1/data-sources | jq -e '.data_sources' > /dev/null 2>&1; then
        print_success "Data Service —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "Data Service –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Report Service
test_report_service() {
    print_header "REPORT SERVICE"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ API Gateway
    if curl -s -H "Authorization: Bearer $TOKEN" http://arch.homework/api/v1/reports | jq -e '.reports' > /dev/null 2>&1; then
        print_success "Report Service —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "Report Service –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
test_monitoring() {
    print_header "–ú–û–ù–ò–¢–û–†–ò–ù–ì"
    
    # Grafana
    if curl -s http://localhost/api/health | grep -q "ok"; then
        print_success "Grafana —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # Prometheus —á–µ—Ä–µ–∑ Ingress (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if curl -s http://localhost:9090/-/healthy | grep -q "Healthy"; then
        print_success "Prometheus —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_warning "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ Ingress (—Ç—Ä–µ–±—É–µ—Ç port-forward)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Saga Pattern
demo_saga_pattern() {
    print_header "SAGA PATTERN –î–ï–ú–û"
    
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Saga..."
    local saga_response
    saga_response=$(curl -s -X POST -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
            "template_id": "1",
            "name": "Demo Report",
            "format": "html",
            "parameters": {"title": "Demo Report"}
        }' \
        http://arch.homework/api/v1/sagas/reports)
    
    if echo "$saga_response" | jq -e '.saga_id' > /dev/null 2>&1; then
        print_success "Saga —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        
        local saga_id
        saga_id=$(echo "$saga_response" | jq -r '.saga_id')
        print_info "Saga ID: $saga_id"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å Saga
        print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Saga..."
        if curl -s -H "Authorization: Bearer $TOKEN" "http://arch.homework/api/v1/sagas/$saga_id" | jq -e '.status' > /dev/null 2>&1; then
            print_success "Saga Pattern —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Saga"
        fi
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Saga"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
demo_idempotency() {
    print_header "–ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨ –î–ï–ú–û"
    
    local idempotency_key="demo-idempotency-$(date +%s)"
    print_info "Idempotency Key: $idempotency_key"
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print_info "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å idempotency key..."
    local first_response
    first_response=$(curl -s -X POST -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -H "Idempotency-Key: $idempotency_key" \
        -d '{
            "template_id": 1,
            "name": "Idempotent Report",
            "format": "html"
        }' \
        http://arch.homework/api/v1/reports/)
    
    if echo "$first_response" | jq -e '.id' > /dev/null 2>&1; then
        print_success "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω"
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º
        print_info "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ idempotency key..."
        local second_response
        second_response=$(curl -s -X POST -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -H "Idempotency-Key: $idempotency_key" \
            -d '{
                "template_id": 1,
                "name": "Idempotent Report",
                "format": "html"
            }' \
            http://arch.homework/api/v1/reports/)
        
        if echo "$second_response" | jq -e '.id' > /dev/null 2>&1; then
            print_success "–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            print_error "–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        fi
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º port-forward)
cleanup() {
    print_info "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–µ (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞)
cleanup_start() {
    print_info "–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ REPORT MICROSERVICES${NC}"
    echo -e "${BLUE}==============================================${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! command -v curl &> /dev/null; then
        print_error "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        print_error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ port-forward –ø—Ä–æ—Ü–µ—Å—Å—ã
    cleanup_start
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_api_gateway
    test_user_service
    test_template_service
    test_data_service
    test_report_service
    test_monitoring
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_saga_pattern
    demo_idempotency
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup
    
    echo -e "\n${GREEN}üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!${NC}"
    echo -e "${GREEN}–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏! üöÄ${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup EXIT INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
