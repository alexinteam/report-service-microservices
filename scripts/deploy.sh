#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Kubernetes

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_cluster() {
    print_status "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes..."
    
    if ! kubectl cluster-info > /dev/null 2>&1; then
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes"
        print_error "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∫–ª–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    print_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes
deploy_k8s() {
    print_status "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –≤ Kubernetes..."
    
    # –°–æ–∑–¥–∞–µ–º namespace'—ã
    print_status "–°–æ–∑–¥–∞–µ–º namespace'—ã..."
kubectl apply -f ../k8s/01-system-namespace.yaml
kubectl apply -f ../k8s/02-namespaces.yaml

    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    print_status "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
kubectl apply -f ../k8s/04-redis.yaml
kubectl apply -f ../k8s/05-rabbitmq.yaml

    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print_status "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    kubectl apply -f ../k8s/14-prometheus.yaml
    kubectl apply -f ../k8s/15-grafana.yaml
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print_status "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    kubectl wait --for=condition=ready pod -l app=redis --namespace=system --timeout=60s
    kubectl wait --for=condition=ready pod -l app=rabbitmq --namespace=system --timeout=60s
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print_status "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    kubectl wait --for=condition=ready pod -l app=prometheus --namespace=system --timeout=120s
    kubectl wait --for=condition=ready pod -l app=grafana --namespace=system --timeout=120s
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
    print_status "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã..."
    
    services=(
        "06-api-gateway.yaml"
        "07-user-service.yaml"
        "08-template-service.yaml"
        "09-report-service.yaml"
        "10-data-service.yaml"
        "11-notification-service.yaml"
        "13-storage-service.yaml"
    )
    
    for service in "${services[@]}"; do
        print_status "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º $service..."
        kubectl apply -f "../k8s/$service"
        if [ $? -eq 0 ]; then
            print_success "$service —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
        else
            print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ $service"
            exit 1
        fi
    done
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–¥–æ–≤
    print_status "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–¥–æ–≤..."
    
    namespaces=("api-gateway" "user-service" "template-service" "report-service" "data-service" "notification-service" "storage-service")
    
    for namespace in "${namespaces[@]}"; do
        print_status "–ü—Ä–æ–≤–µ—Ä—è–µ–º namespace: $namespace"
        kubectl wait --for=condition=ready pod --all --namespace="$namespace" --timeout=120s
    done
    
    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –≤ Kubernetes"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∞—à–±–æ—Ä–¥–æ–≤
setup_monitoring() {
    print_status "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∞—à–±–æ—Ä–¥—ã..."
    
    # –ñ–¥–µ–º, –ø–æ–∫–∞ Grafana –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    print_status "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Grafana..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grafana
    local grafana_ready=false
    for i in {1..10}; do
        if curl -s "http://localhost/api/health" | grep -q "ok"; then
            grafana_ready=true
            break
        fi
        print_status "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Grafana... ($i/10)"
        sleep 10
    done
    
    if [ "$grafana_ready" = true ]; then
        print_success "Grafana –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print_status "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥..."
        if [ -f "monitoring.sh" ]; then
            ./monitoring.sh dashboards
            ./monitoring.sh test
            print_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            print_warning "–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        print_warning "Grafana –Ω–µ –≥–æ—Ç–æ–≤–∞, –¥–∞—à–±–æ—Ä–¥—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ–∑–∂–µ"
        print_status "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: cd scripts && ./create-dashboards.sh"
    fi
}

show_status() {
    print_status "–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    echo "========================"
    
    namespaces=("system" "api-gateway" "user-service" "template-service" "report-service" "data-service" "notification-service" "storage-service")
    
    for namespace in "${namespaces[@]}"; do
        echo ""
        echo "Namespace: $namespace"
        kubectl get pods --namespace="$namespace" 2>/dev/null || echo "Namespace –Ω–µ –Ω–∞–π–¥–µ–Ω"
    done
    
    echo ""
    print_status "–°–µ—Ä–≤–∏—Å—ã:"
    echo "=========="
    kubectl get services --all-namespaces | grep -E "(api-gateway|user-service|template-service|report-service|data-service|notification-service|storage-service|prometheus|grafana)" || true
}

show_access_info() {
    echo ""
    print_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "=========================="
    echo ""
    print_status "üåê –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:"
    echo "===================="
    echo "API Gateway: kubectl port-forward service/api-gateway-service 8080:80 --namespace=api-gateway"
    echo ""
    print_status "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "=============="
    echo "Prometheus: kubectl port-forward service/prometheus-service 9090:80 --namespace=system"
    echo "Grafana: http://localhost/"
    echo "  –õ–æ–≥–∏–Ω: admin"
    echo "  –ü–∞—Ä–æ–ª—å: admin123"
    echo ""
    print_status "üìà –î–∞—à–±–æ—Ä–¥—ã Grafana:"
    echo "==================="
    echo "- Microservices Overview: –û–±—â–∏–π –æ–±–∑–æ—Ä –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "- Business Metrics: –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î"
    echo "- Saga Metrics: –ú–µ—Ç—Ä–∏–∫–∏ Saga –ø–∞—Ç—Ç–µ—Ä–Ω–∞"
    echo "- Service Details: –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
    echo "- Alerts & Health: –ê–ª–µ—Ä—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    print_status "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫:"
    echo "=================="
    echo "–ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ /metrics endpoint"
    echo "–ü—Ä–∏–º–µ—Ä: curl http://localhost:8080/metrics (—á–µ—Ä–µ–∑ port-forward)"
    echo ""
    print_status "üìù Postman –∫–æ–ª–ª–µ–∫—Ü–∏—è:"
    echo "===================="
    echo "–§–∞–π–ª: postman/Report_Microservices_Complete.postman_collection.json"
    echo "–î–æ–º–µ–Ω: arch.homework"
    echo "–ü–æ—Ä—Ç API Gateway: 8080"
    echo ""
    print_status "üîß –ü–æ–ª–µ–∑–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:"
    echo "====================="
    echo "cd scripts"
    echo "./monitoring.sh             # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    echo "./deploy.sh --status        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo "./undeploy.sh               # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    echo ""
    print_status "–ò–ª–∏ —á–µ—Ä–µ–∑ LoadBalancer (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è):"
    echo "kubectl get service --all-namespaces | grep LoadBalancer"
}

main() {
    echo "üöÄ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Kubernetes"
    echo "=================================================="
    echo ""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    SHOW_STATUS=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --status)
                SHOW_STATUS=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo ""
                echo "–û–ø—Ü–∏–∏:"
                echo "  --status    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
                echo "  --help      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo ""
                echo "–ü—Ä–∏–º–µ—Ä—ã:"
                echo "  $0                      # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes"
                echo "  $0 --status            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
                exit 0
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
        esac
    done
    
    if [ "$SHOW_STATUS" = true ]; then
        show_status
    else
        check_cluster
        deploy_k8s
        setup_monitoring
        show_access_info
    fi
}

main "$@"