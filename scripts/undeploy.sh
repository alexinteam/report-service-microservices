#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ Kubernetes

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Kubernetes
undeploy_k8s() {
    print_status "–£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∏–∑ Kubernetes..."
    
    # –£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
    print_status "–£–¥–∞–ª—è–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã..."
    
    services=(
        "13-storage-service.yaml"
        "11-notification-service.yaml"
        "10-data-service.yaml"
        "09-report-service.yaml"
        "08-template-service.yaml"
        "07-user-service.yaml"
        "06-api-gateway.yaml"
    )
    
    for service in "${services[@]}"; do
        print_status "–£–¥–∞–ª—è–µ–º $service..."
        kubectl delete -f "../k8s/$service" --ignore-not-found=true
        if [ $? -eq 0 ]; then
            print_success "$service —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        else
            print_warning "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ $service"
        fi
    done
    
    # –£–¥–∞–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print_status "–£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    kubectl delete -f ../k8s/15-grafana.yaml --ignore-not-found=true
    kubectl delete -f ../k8s/14-prometheus.yaml --ignore-not-found=true
    
    # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    print_status "–£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
    kubectl delete -f ../k8s/05-rabbitmq.yaml --ignore-not-found=true
    kubectl delete -f ../k8s/04-redis.yaml --ignore-not-found=true
    
    # –£–¥–∞–ª—è–µ–º namespace'—ã
    print_status "–£–¥–∞–ª—è–µ–º namespace'—ã..."
    kubectl delete -f ../k8s/02-namespaces.yaml --ignore-not-found=true
    kubectl delete -f ../k8s/01-system-namespace.yaml --ignore-not-found=true
    
    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ Kubernetes"
}

# –û—á–∏—Å—Ç–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana
cleanup_grafana() {
    print_status "–û—á–∏—â–∞–µ–º –¥–∞—à–±–æ—Ä–¥—ã Grafana..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grafana
    local grafana_ready=false
    for i in {1..5}; do
        if curl -s "http://localhost/api/health" | grep -q "ok"; then
            grafana_ready=true
            break
        fi
        print_status "–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Grafana... ($i/5)"
        sleep 2
    done
    
    if [ "$grafana_ready" = true ]; then
        print_status "–£–¥–∞–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥—ã..."
        
        local dashboards=$(curl -s "http://localhost/api/search?type=dash-db" \
            -H "Authorization: Basic $(echo -n 'admin:admin123' | base64)" 2>/dev/null || echo "[]")
        
        local our_dashboards=("Microservices Overview" "Business Metrics" "Saga Metrics" "Service Details" "Alerts & Health")
        
        for dashboard_name in "${our_dashboards[@]}"; do
            local dashboard_id=$(echo "$dashboards" | jq -r ".[] | select(.title == \"$dashboard_name\") | .id" 2>/dev/null | head -1)
            if [ -n "$dashboard_id" ] && [ "$dashboard_id" != "null" ] && [ "$dashboard_id" != "" ]; then
                print_status "–£–¥–∞–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥: $dashboard_name (ID: $dashboard_id)"
                curl -s -X DELETE "http://localhost/api/dashboards/db/$dashboard_id" \
                    -H "Authorization: Basic $(echo -n 'admin:admin123' | base64)" >/dev/null
                print_success "–î–∞—à–±–æ—Ä–¥ $dashboard_name —É–¥–∞–ª–µ–Ω"
            fi
        done
        
        print_success "–î–∞—à–±–æ—Ä–¥—ã Grafana –æ—á–∏—â–µ–Ω—ã"
    else
        print_warning "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –¥–∞—à–±–æ—Ä–¥—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã"
    fi
}

show_final_status() {
    print_status "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:"
    echo "=================="
    
    namespaces=("system" "api-gateway" "user-service" "template-service" "report-service" "data-service" "notification-service" "storage-service")
    
    for namespace in "${namespaces[@]}"; do
        if kubectl get namespace "$namespace" >/dev/null 2>&1; then
            print_warning "Namespace $namespace –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            print_success "Namespace $namespace —É–¥–∞–ª–µ–Ω"
        fi
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üóëÔ∏è –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ Kubernetes"
    echo "=============================================="
    echo ""
    
    SHOW_STATUS=false
    CLEANUP_DASHBOARDS=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --status)
                SHOW_STATUS=true
                shift
                ;;
            --dashboards)
                CLEANUP_DASHBOARDS=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo ""
                echo "–û–ø—Ü–∏–∏:"
                echo "  --status      –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è"
                echo "  --dashboards  –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—à–±–æ—Ä–¥—ã Grafana"
                echo "  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo ""
                echo "–ü—Ä–∏–º–µ—Ä—ã:"
                echo "  $0                      # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Kubernetes"
                echo "  $0 --status            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
                echo "  $0 --dashboards        # –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—à–±–æ—Ä–¥—ã"
                exit 0
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
                ;;
        esac
    done
    
    if [ "$SHOW_STATUS" = true ]; then
        show_final_status
    elif [ "$CLEANUP_DASHBOARDS" = true ]; then
        cleanup_grafana
    else
        cleanup_grafana
        undeploy_k8s
        show_final_status
    fi
    
    echo ""
    print_success "üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "======================"
}

main "$@"