#!/bin/bash

# üìä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ: –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ–¥–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GRAFANA_URL="http://localhost"
GRAFANA_USER="admin"
GRAFANA_PASS="admin123"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local missing_deps=()
    
    if ! command -v kubectl &> /dev/null; then
        missing_deps+=("kubectl")
    fi
    
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if ! command -v jq &> /dev/null; then
        warning "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è JSON –æ–±—Ä–∞–±–æ—Ç–∫–∏)"
    fi
    
    if [ ${#missing_deps[@]} -eq 0 ]; then
        success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 0
    else
        error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ Kubernetes
check_cluster() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ Kubernetes..."
    
    if ! kubectl cluster-info > /dev/null 2>&1; then
        error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É Kubernetes"
        error "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∫–ª–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    success "–ö–ª–∞—Å—Ç–µ—Ä Kubernetes –¥–æ—Å—Ç—É–ø–µ–Ω"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local namespaces=("api-gateway" "user-service" "template-service" "report-service" "data-service" "notification-service" "storage-service")
    local all_ready=true
    
    for namespace in "${namespaces[@]}"; do
        local ready_pods=$(kubectl get pods -n "$namespace" --no-headers 2>/dev/null | grep -c "Running" || echo "0")
        local total_pods=$(kubectl get pods -n "$namespace" --no-headers 2>/dev/null | wc -l || echo "0")
        
        if [ "$total_pods" -gt 0 ]; then
            if [ "$ready_pods" -eq "$total_pods" ]; then
                success "$namespace –≥–æ—Ç–æ–≤ ($ready_pods/$total_pods)"
            else
                warning "$namespace –Ω–µ –≥–æ—Ç–æ–≤ ($ready_pods/$total_pods)"
                all_ready=false
            fi
        else
            warning "$namespace: –ø–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            all_ready=false
        fi
    done
    
    if [ "$all_ready" = true ]; then
        success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
        return 0
    else
        warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
check_monitoring() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Prometheus
    local prometheus_ready=$(kubectl get pods -n system -l app=prometheus --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    if [ "$prometheus_ready" -gt 0 ]; then
        success "Prometheus –≥–æ—Ç–æ–≤"
    else
        error "Prometheus –Ω–µ –≥–æ—Ç–æ–≤"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Grafana
    local grafana_ready=$(kubectl get pods -n system -l app=grafana --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    if [ "$grafana_ready" -gt 0 ]; then
        success "Grafana –≥–æ—Ç–æ–≤–∞"
    else
        error "Grafana –Ω–µ –≥–æ—Ç–æ–≤–∞"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana
check_grafana() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana..."
    
    if curl -s "http://localhost/api/health" | grep -q "ok"; then
        success "Grafana –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ http://localhost/"
        info "–õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123"
        return 0
    else
        error "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
check_prometheus() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º port-forward –¥–ª—è Prometheus
    local pid=$(kubectl port-forward service/prometheus-service 9090:80 -n system &> /dev/null & echo $!)
    sleep 3
    
    if curl -s "http://localhost:9090/api/v1/query?query=up" | grep -q "success"; then
        success "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
        local metrics_count=$(curl -s "http://localhost:9090/api/v1/query?query=http_requests_total" | jq -r '.data.result | length' 2>/dev/null || echo "0")
        if [ "$metrics_count" -gt 0 ]; then
            success "–ú–µ—Ç—Ä–∏–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞–π–¥–µ–Ω—ã ($metrics_count –º–µ—Ç—Ä–∏–∫)"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            echo "   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:"
            curl -s "http://localhost:9090/api/v1/query?query=http_requests_total" | \
            jq -r '.data.result[] | "   \(.metric.service): \(.value[1]) –∑–∞–ø—Ä–æ—Å–æ–≤"' 2>/dev/null | \
            sort | uniq -c | sort -nr | head -10 || echo "   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        else
            warning "–ú–µ—Ç—Ä–∏–∫–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        error "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º port-forward
    kill $pid 2>/dev/null || true
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤
check_dashboards() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–æ–≤ —á–µ—Ä–µ–∑ API
    local dashboards=$(curl -s "http://localhost/api/search?type=dash-db" -H "Authorization: Basic $(echo -n 'admin:admin123' | base64)" 2>/dev/null || echo "[]")
    
    local our_dashboards=("Microservices Overview" "Business Metrics" "Saga Metrics" "Service Details" "Alerts & Health")
    local found_count=0
    
    for dashboard_name in "${our_dashboards[@]}"; do
        if echo "$dashboards" | grep -q "$dashboard_name"; then
            ((found_count++))
        fi
    done
    
    if [ "$found_count" -gt 0 ]; then
        success "–ì–æ—Ç–æ–≤—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –Ω–∞–π–¥–µ–Ω—ã ($found_count/5)"
        echo "   –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã:"
        for dashboard_name in "${our_dashboards[@]}"; do
            if echo "$dashboards" | grep -q "$dashboard_name"; then
                echo "   ‚Ä¢ $dashboard_name"
            fi
        done
    else
        warning "–ì–æ—Ç–æ–≤—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
create_dashboard() {
    local dashboard_file="$1"
    local dashboard_name="$2"
    
    log "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ '$dashboard_name'..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∞—à–±–æ—Ä–¥
    local existing_id=$(curl -s "http://localhost/api/search?type=dash-db&query=$dashboard_name" \
        -H "Authorization: Basic $(echo -n 'admin:admin123' | base64)" \
        | jq -r '.[0].id // empty' 2>/dev/null)
    
    if [ -n "$existing_id" ]; then
        warning "–î–∞—à–±–æ—Ä–¥ '$dashboard_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: $existing_id)"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    local response=$(curl -s -X POST "http://localhost/api/dashboards/db" \
        -H "Content-Type: application/json" \
        -H "Authorization: Basic $(echo -n 'admin:admin123' | base64)" \
        -d @"$dashboard_file")
    
    if echo "$response" | grep -q '"status":"success"'; then
        success "–î–∞—à–±–æ—Ä–¥ '$dashboard_name' —Å–æ–∑–¥–∞–Ω"
        return 0
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ '$dashboard_name'"
        echo "$response" | jq -r '.message // .' 2>/dev/null || echo "$response"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤
create_all_dashboards() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤..."
    
    local dashboards=(
        "../dashboards/microservices-overview-dashboard.json:Microservices Overview"
        "../dashboards/business-metrics-dashboard.json:Business Metrics"
        "../dashboards/saga-metrics-dashboard.json:Saga Metrics"
        "../dashboards/service-details-dashboard.json:Service Details"
        "../dashboards/alerts-health-dashboard.json:Alerts & Health"
    )
    
    local success_count=0
    local total_count=${#dashboards[@]}
    
    for dashboard_info in "${dashboards[@]}"; do
        local file=$(echo "$dashboard_info" | cut -d: -f1)
        local name=$(echo "$dashboard_info" | cut -d: -f2)
        
        if [ -f "$file" ]; then
            if create_dashboard "$file" "$name"; then
                ((success_count++))
            fi
        else
            error "–§–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞ '$file' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        echo ""
    done
    
    log "–†–µ–∑—É–ª—å—Ç–∞—Ç: $success_count/$total_count –¥–∞—à–±–æ—Ä–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
generate_test_data() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    local services=(
        "user-service-service:8081:user-service"
        "template-service-service:8082:template-service"
        "notification-service-service:8085:notification-service"
    )
    
    for service_info in "${services[@]}"; do
        local service_name=$(echo "$service_info" | cut -d: -f1)
        local port=$(echo "$service_info" | cut -d: -f2)
        local namespace=$(echo "$service_info" | cut -d: -f3)
        
        log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è $service_name..."
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º port-forward
        local pid=$(kubectl port-forward "service/$service_name" "$port:$port" -n "$namespace" &> /dev/null & echo $!)
        sleep 2
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for i in {1..20}; do
            curl -s "http://localhost:$port/health" &> /dev/null || true
            curl -s "http://localhost:$port/metrics" &> /dev/null || true
            sleep 0.1
        done
        
        success "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è $service_name –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º port-forward
        kill $pid 2>/dev/null || true
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
show_status() {
    echo ""
    echo -e "${PURPLE}üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞${NC}"
    echo "================================"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grafana
    if curl -s "http://localhost/api/health" | grep -q "ok"; then
        success "Grafana –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ http://localhost/"
        info "–õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123"
    else
        warning "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ http://localhost/"
        info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: kubectl port-forward service/grafana-service 3000:80 -n system"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Prometheus
    local prometheus_pid=$(kubectl port-forward service/prometheus-service 9090:80 -n system &> /dev/null & echo $!)
    sleep 2
    
    if curl -s "http://localhost:9090/api/health" | grep -q "ok"; then
        success "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω"
        info "–î–ª—è –¥–æ—Å—Ç—É–ø–∞: kubectl port-forward service/prometheus-service 9090:80 -n system"
    else
        warning "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    kill $prometheus_pid 2>/dev/null || true
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
show_commands() {
    echo -e "${PURPLE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã${NC}"
    echo "=================="
    echo ""
    echo -e "${GREEN}–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–∞–º:${NC}"
    echo "‚Ä¢ Grafana: http://localhost/"
    echo "‚Ä¢ Prometheus: kubectl port-forward service/prometheus-service 9090:80 -n system"
    echo ""
    echo -e "${GREEN}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    echo "‚Ä¢ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–¥–æ–≤: kubectl get pods -A"
    echo "‚Ä¢ –°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤: kubectl get pods -n microservices"
    echo "‚Ä¢ –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: kubectl logs -f deployment/user-service -n user-service"
    echo ""
    echo -e "${GREEN}–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫:${NC}"
    echo "‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: kubectl port-forward service/user-service 8081:8081 -n user-service && curl http://localhost:8081/metrics"
    echo "‚Ä¢ Prometheus targets: kubectl port-forward service/prometheus-service 9090:80 -n system && curl http://localhost:9090/targets"
    echo ""
    echo -e "${GREEN}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ./monitoring.sh test"
    echo "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ./monitoring.sh check"
    echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ./monitoring.sh status"
    echo ""
    echo -e "${GREEN}–î–∞—à–±–æ—Ä–¥—ã:${NC}"
    echo "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥—ã: ./monitoring.sh dashboards"
    echo "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—à–±–æ—Ä–¥—ã: ./monitoring.sh check"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}"
    echo "üìä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "================================================="
    echo -e "${NC}"
    
    check_dependencies || exit 1
    check_cluster || exit 1
    check_services || exit 1
    check_monitoring || exit 1
    
    echo ""
    check_grafana
    echo ""
    check_prometheus
    echo ""
    check_dashboards
    
    echo ""
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏..."
    generate_test_data
    
    echo ""
    success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    show_status
    echo ""
    show_commands
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "check")
        check_dependencies && check_cluster && check_services && check_monitoring && check_grafana && check_prometheus && check_dashboards
        ;;
    "grafana")
        check_grafana
        ;;
    "prometheus")
        check_prometheus
        ;;
    "dashboards")
        check_grafana && create_all_dashboards
        ;;
    "test")
        generate_test_data
        ;;
    "status")
        show_status
        ;;
    "commands")
        show_commands
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  check      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"
        echo "  grafana    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Grafana"
        echo "  prometheus - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Prometheus –∏ –º–µ—Ç—Ä–∏–∫–∏"
        echo "  dashboards - –°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥—ã"
        echo "  test       - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
        echo "  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        echo "  commands   - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
        echo "  help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        ;;
    *)
        main
        ;;
esac
