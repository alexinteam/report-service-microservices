apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secret
  namespace: api-gateway
type: Opaque
data:
  JWT_SECRET: eW91ci1zZWNyZXQta2V5LWNoYW5nZS1pbi1wcm9kdWN0aW9u  # your-secret-key-change-in-production

---
apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-db-secret
  namespace: api-gateway
type: Opaque
data:
  POSTGRES_DB: YXBpX2dhdGV3YXk=        # api_gateway
  POSTGRES_USER: cG9zdGdyZXM=          # postgres
  POSTGRES_PASSWORD: cGFzc3dvcmQ=      # password

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: api-gateway
data:
  PORT: "8080"
  ENVIRONMENT: "production"
  LOG_LEVEL: "info"
  AUTO_MIGRATE: "true"
  SEED_DATA: "true"
  DATABASE_URL: "postgres://postgres:password@api-gateway-postgres.api-gateway.svc.cluster.local:5432/api_gateway?sslmode=disable"
  USER_SERVICE_URL: "http://user-service-service.user-service.svc.cluster.local:8081"
  TEMPLATE_SERVICE_URL: "http://template-service-service.template-service.svc.cluster.local:8082"
  REPORT_SERVICE_URL: "http://report-service-service.report-service.svc.cluster.local:8083"
  DATA_SERVICE_URL: "http://data-service-service.data-service.svc.cluster.local:8083"
  NOTIFICATION_SERVICE_URL: "http://notification-service-service.notification-service.svc.cluster.local:8085"
  STORAGE_SERVICE_URL: "http://storage-service-service.storage-service.svc.cluster.local:8086"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-db-config
  namespace: api-gateway
data:
  POSTGRES_DB: api_gateway
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-postgres
  namespace: api-gateway
  labels:
    app: api-gateway-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway-postgres
  template:
    metadata:
      labels:
        app: api-gateway-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: api-gateway-db-config
        - secretRef:
            name: api-gateway-db-secret
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: api-gateway-postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-gateway-postgres-pvc
  namespace: api-gateway
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-postgres
  namespace: api-gateway
  labels:
    app: api-gateway-postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: api-gateway-postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: api-gateway
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: alexinteam/report-system-api-gateway:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: api-gateway-config
        - secretRef:
            name: api-gateway-secret
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: api-gateway
  labels:
    app: api-gateway
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: api-gateway

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: api-gateway
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - host: arch.homework
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 80
