apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: system
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alert_rules.yml"

    scrape_configs:
      # Prometheus сам себя
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Микросервисы - статическая конфигурация для надежности
      - job_name: 'microservices'
        static_configs:
          # User Service
          - targets: ['user-service-service.user-service.svc.cluster.local:8081']
            labels:
              service: 'user-service'
          # Template Service  
          - targets: ['template-service-service.template-service.svc.cluster.local:8082']
            labels:
              service: 'template-service'
          # Data Service
          - targets: ['data-service-service.data-service.svc.cluster.local:8084']
            labels:
              service: 'data-service'
          # Report Service
          - targets: ['report-service-service.report-service.svc.cluster.local:8083']
            labels:
              service: 'report-service'
          # Notification Service
          - targets: ['notification-service-service.notification-service.svc.cluster.local:8085']
            labels:
              service: 'notification-service'
          # Storage Service
          - targets: ['storage-service-service.storage-service.svc.cluster.local:8087']
            labels:
              service: 'storage-service'
          # API Gateway
          - targets: ['api-gateway-service.api-gateway.svc.cluster.local:80']
            labels:
              service: 'api-gateway'
        metrics_path: /metrics
        scrape_interval: 10s

      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  alert_rules.yml: |
    groups:
      - name: microservices
        rules:
          - alert: HighErrorRate
            expr: rate(http_requests_total{status_code!~"2.."}[5m]) > 0.1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }} errors per second"

          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is {{ $value }} seconds"

          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service is down"
              description: "Service {{ $labels.job }} is down"

          - alert: HighMemoryUsage
            expr: memory_usage_bytes / (1024*1024*1024) > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage"
              description: "Memory usage is {{ $value }} GB"

          - alert: DatabaseErrors
            expr: rate(database_errors_total[5m]) > 0.01
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "Database errors detected"
              description: "Database error rate is {{ $value }} errors per second"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: system
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=200h'
          - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
        resources:
          requests:
            cpu: 500m
            memory: 500M
          limits:
            cpu: 1
            memory: 1Gi
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: prometheus-storage-volume
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: system
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 9090
    protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: system
