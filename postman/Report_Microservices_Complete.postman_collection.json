{
	"info": {
		"_postman_id": "report-microservices-api",
		"name": "Report Microservices API - Complete Collection",
		"description": "# Report Microservices API - Complete Collection\n\n## Описание\n\nЭта Postman коллекция предназначена для тестирования всех API endpoints микросервисов генерации отчетов через API Gateway с использованием localhost и Saga паттерна.\n\n## Настройка доступа\n\nДля работы с коллекцией необходимо настроить port-forward для API Gateway:\n\n```bash\n# API Gateway\nkubectl port-forward service/api-gateway-service 80:80 -n api-gateway &\n```\n\n## Структура коллекции\n\n### 1. API Gateway\n- **Health Check** - проверка состояния API Gateway\n\n### 2. User Service (через API Gateway)\n- **Register User** - регистрация нового пользователя\n- **Login User** - авторизация пользователя\n- **Get User Profile** - получение профиля пользователя\n\n### 3. Template Service (через API Gateway)\n- **Create Template** - создание шаблона отчета\n- **Get Templates** - получение списка шаблонов\n- **Get Template by ID** - получение шаблона по ID\n\n### 4. Report Service (через API Gateway)\n- **Create Report (Saga)** - создание отчета через Saga\n- **Get Reports** - получение списка отчетов\n- **Get Report by ID** - получение отчета по ID\n- **Generate Report** - генерация отчета\n\n### 5. Data Service (через API Gateway)\n- **Create Data Source** - создание источника данных\n- **Get Data Sources** - получение списка источников данных\n- **Collect Data** - сбор данных\n\n### 6. Notification Service (через API Gateway)\n- **Send Notification** - отправка уведомления\n- **Get Notifications** - получение списка уведомлений\n\n### 7. Storage Service (через API Gateway)\n- **Upload File** - загрузка файла\n- **Download File** - скачивание файла\n- **List Files** - список файлов\n\n## Переменные окружения\n\nКоллекция использует следующие переменные:\n\n- `base_url` - базовый URL (http://localhost)\n- `jwt_token` - JWT токен для авторизации\n- `template_id` - ID шаблона\n- `report_id` - ID отчета\n- `file_id` - ID файла\n\n## Автоматизация\n\n### Pre-request Scripts\n- Автоматическая установка базового URL\n- Извлечение JWT токена из ответа логина\n\n### Test Scripts\n- Проверка времени ответа (< 5000ms)\n- Проверка Content-Type\n- Автоматическое сохранение ID для последующих запросов\n\n## Примеры использования\n\n### 1. Полный цикл создания отчета через Saga\n\n```bash\n# 1. Регистрация пользователя\nPOST http://arch.homework/api/v1/users/register\n{\n  \"name\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}\n\n# 2. Авторизация\nPOST http://arch.homework/api/v1/users/login\n{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}\n\n# 3. Создание шаблона\nPOST http://arch.homework/api/v1/templates\n{\n  \"name\": \"Monthly Sales Report\",\n  \"description\": \"Template for monthly sales reports\",\n  \"content\": \"SELECT * FROM sales WHERE month = '{{month}}'\",\n  \"type\": \"html\",\n  \"category\": \"sales\",\n  \"variables\": \"{\\\"month\\\": {\\\"type\\\": \\\"string\\\", \\\"required\\\": true}}\"\n}\n\n# 4. Создание отчета через Saga\nPOST http://arch.homework/api/v1/reports\n{\n  \"template_id\": 1,\n  \"name\": \"Отчет за январь 2024\",\n  \"description\": \"Ежемесячный отчет по продажам\",\n  \"parameters\": {\n    \"month\": \"2024-01\"\n  }\n}\n```\n\n## Test Data Examples\n\n### User Registration Data\n```json\n{\n  \"name\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}\n```\n\n### Template Creation Data\n```json\n{\n  \"name\": \"Monthly Sales Report\",\n  \"description\": \"Template for monthly sales reports\",\n  \"content\": \"SELECT * FROM sales WHERE month = '{{month}}'\",\n  \"type\": \"html\",\n  \"category\": \"sales\",\n  \"variables\": \"{\\\"month\\\": {\\\"type\\\": \\\"string\\\", \\\"required\\\": true}}\"\n}\n```\n\n### Report Creation Data (Saga)\n```json\n{\n  \"template_id\": 1,\n  \"name\": \"Отчет за январь 2024\",\n  \"description\": \"Ежемесячный отчет по продажам\",\n  \"parameters\": {\n    \"month\": \"2024-01\"\n  }\n}\n```\n\n## Test Scenarios\n\n### 1. Happy Path - Successful Report Creation\n1. Register user\n2. Login user\n3. Create template\n4. Create report via Saga\n5. Monitor report status\n6. Verify report completion\n\n### 2. Error Handling - Failed Report\n1. Create report with invalid template_id\n2. Monitor report failure\n3. Retry failed report\n4. Verify successful completion\n\n### 3. Idempotency Testing\n1. Create same report multiple times\n2. Verify only one report created\n3. Check duplicate prevention\n\n## Troubleshooting\n\n### Частые проблемы\n\n1. **401 Unauthorized**\n   - Проверьте JWT токен\n   - Убедитесь, что токен не истек\n\n2. **404 Not Found**\n   - Проверьте правильность ID ресурсов\n   - Убедитесь, что ресурс существует\n\n3. **500 Internal Server Error**\n   - Проверьте логи сервисов\n   - Убедитесь, что все зависимости запущены\n\n### Логи и отладка\n\nДля отладки используйте:\n- Логи API Gateway для диагностики маршрутизации\n- Логи микросервисов для детальной диагностики\n- Grafana дашборды для мониторинга производительности",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Gateway",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://arch.homework/health",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"health"
							]
						}
					}
				}
			]
		},
		{
			"name": "User Service (via API Gateway)",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/users/register",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"users",
								"register"
							]
						}
					}
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/users/login",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							]
						}
					}
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/users/profile",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						}
					}
				}
			]
		},
		{
			"name": "Template Service",
			"item": [
				{
					"name": "Create Template",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Monthly Sales Report\",\n  \"description\": \"Template for monthly sales reports\",\n  \"content\": \"SELECT * FROM sales WHERE month = '{{month}}'\",\n  \"parameters\": [\n    {\n      \"name\": \"month\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Month in YYYY-MM format\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/templates",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"templates"
							]
						}
					}
				},
				{
					"name": "Get Templates",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/templates?page=1&limit=10",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"templates"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Template by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/templates/{{template_id}}",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"templates",
								"{{template_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Report Service",
			"item": [
				{
					"name": "Create Report (Async)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"January 2024 Sales Report\",\n  \"description\": \"Monthly sales report for January 2024\",\n  \"template_id\": {{template_id}},\n  \"parameters\": \"{\\\"month\\\": \\\"2024-01\\\"}\"\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/reports",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"reports"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202 Accepted\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response has report ID and status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.status).to.eql('pending');",
									"    ",
									"    // Сохраняем ID отчета для последующих запросов",
									"    pm.environment.set('report_id', jsonData.id);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Reports",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/reports?page=1&limit=10",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"reports"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Report by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/reports/{{report_id}}",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"reports",
								"{{report_id}}"
							]
						}
					}
				},
				{
					"name": "Get Report Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/reports/{{report_id}}/status",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"reports",
								"{{report_id}}",
								"status"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has report status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(['pending', 'processing', 'completed', 'failed', 'cancelled']).to.include(jsonData.status);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Generate Report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"parameters\": {\n    \"month\": \"2024-01\"\n  }\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/reports/generate",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"reports",
								"generate"
							]
						}
					}
				}
			]
		},
		{
			"name": "Data Service",
			"item": [
				{
					"name": "Create Data Source",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sales Database\",\n  \"type\": \"postgresql\",\n  \"connection_string\": \"postgres://user:pass@localhost:5432/sales\",\n  \"description\": \"Main sales database\"\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/data-sources",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"data-sources"
							]
						}
					}
				},
				{
					"name": "Get Data Sources",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/data-sources",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"data-sources"
							]
						}
					}
				},
				{
					"name": "Collect Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data_source_id\": 1,\n  \"query\": \"SELECT * FROM sales WHERE month = '2024-01'\",\n  \"parameters\": {\n    \"month\": \"2024-01\"\n  }\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/data/collect",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"data",
								"collect"
							]
						}
					}
				}
			]
		},
		{
			"name": "Notification Service",
			"item": [
				{
					"name": "Send Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": 1,\n  \"type\": \"email\",\n  \"subject\": \"Report Ready\",\n  \"message\": \"Your report is ready for download\",\n  \"recipient\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "http://arch.homework/api/v1/notifications",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"notifications"
							]
						}
					}
				},
				{
					"name": "Get Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/notifications?page=1&limit=10",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"notifications"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Storage Service",
			"item": [
				{
					"name": "Upload File",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "type",
									"value": "report",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://arch.homework/api/v1/storage/upload",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"storage",
								"upload"
							]
						}
					}
				},
				{
					"name": "Download File",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/storage/download/{{file_id}}",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"storage",
								"download",
								"{{file_id}}"
							]
						}
					}
				},
				{
					"name": "List Files",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://arch.homework/api/v1/storage/files?page=1&limit=10",
							"protocol": "http",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"api",
								"v1",
								"storage",
								"files"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Установка переменных окружения",
					"pm.environment.set('base_url', 'http://localhost');",
					"",
					"// Автоматическое извлечение JWT токена из ответа логина",
					"if (pm.info.requestName === 'Login User') {",
					"    pm.test('Login successful', function () {",
					"        pm.response.to.have.status(200);",
					"        var jsonData = pm.response.json();",
					"        if (jsonData.token) {",
					"            pm.environment.set('jwt_token', jsonData.token);",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Общие тесты для всех запросов",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has proper content type', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Специфичные тесты для Saga endpoints",
					"if (pm.info.requestName.includes('Saga')) {",
					"    pm.test('Saga response contains saga_id', function () {",
					"        if (pm.response.code === 200 || pm.response.code === 202) {",
					"            var jsonData = pm.response.json();",
					"            pm.expect(jsonData).to.have.property('saga_id');",
					"            ",
					"            // Сохраняем saga_id для последующих запросов",
					"            if (jsonData.saga_id) {",
					"                pm.environment.set('saga_id', jsonData.saga_id);",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"// Специфичные тесты для Template endpoints",
					"if (pm.info.requestName.includes('Template')) {",
					"    pm.test('Template response contains id', function () {",
					"        if (pm.response.code === 200 || pm.response.code === 201) {",
					"            var jsonData = pm.response.json();",
					"            if (jsonData.template && jsonData.template.id) {",
					"                pm.environment.set('template_id', jsonData.template.id);",
					"            } else if (jsonData.id) {",
					"                pm.environment.set('template_id', jsonData.id);",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"// Специфичные тесты для Report endpoints",
					"if (pm.info.requestName.includes('Report')) {",
					"    pm.test('Report response contains id', function () {",
					"        if (pm.response.code === 200 || pm.response.code === 201 || pm.response.code === 202) {",
					"            var jsonData = pm.response.json();",
					"            if (jsonData.report && jsonData.report.id) {",
					"                pm.environment.set('report_id', jsonData.report.id);",
					"            } else if (jsonData.id) {",
					"                pm.environment.set('report_id', jsonData.id);",
					"            }",
					"        }",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "saga_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "template_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "report_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "file_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "data_source_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "schedule_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "notification_id",
			"value": "",
			"type": "string"
		}
	]
}
